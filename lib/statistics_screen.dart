import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import '../services/api_service.dart';

class StatisticsScreen extends StatefulWidget {
  const StatisticsScreen({super.key});

  @override
  State<StatisticsScreen> createState() => _StatisticsScreenState();
}

class _StatisticsScreenState extends State<StatisticsScreen> {
  late Future<StudyStatResponse> _statsFuture;

  @override
  void initState() {
    super.initState();
    // I1.2. Giao di·ªán th·ªëng k√™ g·ª≠i y√™u c·∫ßu GET /api/stats?range=week ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·ªëng k√™ m·∫∑c ƒë·ªãnh (7 ng√†y g·∫ßn nh·∫•t).
    _statsFuture = ApiService().getStats("week");
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("üìä Ph√¢n t√≠ch & Th·ªëng k√™")),
      body: FutureBuilder<StudyStatResponse>(
        future: _statsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            // I1.8. Trong khi ch·ªù d·ªØ li·ªáu, hi·ªÉn th·ªã loading
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            // I1.8. N·∫øu l·ªói x·∫£y ra khi l·∫•y d·ªØ li·ªáu t·ª´ API
            return Center(child: Text('L·ªói: ${snapshot.error}'));
          } else if (!snapshot.hasData) {
            // I1.8. Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
            return const Center(child: Text('Kh√¥ng c√≥ d·ªØ li·ªáu.'));
          }

          final data = snapshot.data!;
          // I1.8. D·ªØ li·ªáu ƒë∆∞·ª£c nh·∫≠n t·ª´ API v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì + KPIs

          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                const Text("Bi·ªÉu ƒë·ªì s·ªë gi·ªù h·ªçc m·ªói ng√†y"),
                SizedBox(
                  height: 200,
                  child: BarChart(
                    BarChartData(
                      barGroups:
                          data.stats
                              .map(
                                (stat) => BarChartGroupData(
                                  x: data.stats.indexOf(stat),
                                  barRods: [
                                    BarChartRodData(
                                      toY: stat.studyHours,
                                      color: Colors.blue,
                                    ),
                                  ],
                                ),
                              )
                              .toList(),
                      titlesData: FlTitlesData(
                        bottomTitles: AxisTitles(
                          sideTitles: SideTitles(
                            showTitles: true,
                            getTitlesWidget: (value, _) {
                              return Text(data.stats[value.toInt()].date);
                            },
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                const Text("KPIs"),
                Text("S·ªë gi·ªù h·ªçc trung b√¨nh/ng√†y: ${data.kpi['avgStudy']}"),
                Text(
                  "T·ªâ l·ªá ho√†n th√†nh c√¥ng vi·ªác: ${data.kpi['taskCompletion']}%",
                ),
                Text("T·ªâ l·ªá ƒë·∫°t m·ª•c ti√™u: ${data.kpi['goalAchieved']}%"),
              ],
            ),
          );
        },
      ),
    );
  }
}
